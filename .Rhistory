source('~/Documents/git/data-science-postgrad/session02/1_statistics/intro2R-lab1.R')
source('~/Documents/git/data-science-postgrad/session02/1_statistics/intro2R-lab1.R')
source('~/Documents/git/data-science-postgrad/session02/1_statistics/intro2R-lab1.R')
source('~/Documents/git/data-science-postgrad/session02/1_statistics/intro2R-lab1.R')
source('~/Documents/git/data-science-postgrad/session02/1_statistics/stat-1_RScript1.R')
source('~/Documents/git/data-science-postgrad/session02/1_statistics/stat-1_RScript1.R')
source('~/Documents/git/data-science-postgrad/session02/1_statistics/stat-1_RScript1.R')
source('~/Documents/git/data-science-postgrad/session02/1_statistics/stat-1_RScript1.R')
source('~/Documents/git/data-science-postgrad/session02/1_statistics/stat-1_RScript1.R')
people <- data.frame(
name = c("ALice", "John", "Melinda"),
height = c(150, 170, 165),
weight = c(60, 70, 65),
stringsAsFactors = FALSE)
View(people)
View(mtcars)
View(presidentialElections)
View(presidentialElections)
install.packages("pscl")
library("pscl")
View(presidentialElections)
?presidentialElections
library("nycflights13")
# Load flights data frame ----
install.packages("nycflights13")
library("nycflights13")
# Read available documentation
?flights
# Check the number of rows and columns
dim(flights)
# Inspect the column names
colnames(flights)
# Look at the data frame in the RStudio Viewer
View(flights)
head(flights)
# Load tidyverse ----
install.packages("tidyverse")
library("tidyverse")
?n
?n
has_most_delays <- flights %>%
group_by(carrier) %>%
filter(dep_delay > 0) %>%
summarize(num_delay = n()) %>%
filter(num_delay == max(num_delay)) %>%
select(carrier)
View(has_most_delays)
print(has_most_delays)
print(as.data.frame(has_most_delays))
# Get name of the most delayed carrier
most_delayed_name <- has_most_delays %>%
left_join(airlines, by = 'carrier') %>%
select(name)
print(most_delayed_name$name)
View(airlines)
View(has_most_delays)
View(most_delayed_name)
carrier_stats
carrier_stats <- flights %>%
group_by(carrier) %>%
mutate(
num_all_flights = summarize(num_all_flights = n())
)
carrier_stats <- flights %>%
group_by(carrier) %>%
summarize(num_all_flights = n())
View(carrier_stats)
all_flight_stats <- flights %>%
group_by(carrier) %>%
summarize(
num_all_flights = n()
)
View(all_flight_stats)
delay_flight_stats <- flights %>%
filter(dep_delay > 0) %>%
summarize(
num_delay = n()
)
View(delay_flight_stats)
delay_flight_stats <- flights %>%
group_by(carrier) %>%
filter(dep_delay > 0) %>%
summarize(
num_delay = n()
)
View(delay_flight_stats)
# combine per carrier summaries
flight_stats <- all_flight_stats %>%
left_join(delay_flight_stats, by = "carrier")
View(flight_stats)
# add ratio column
flight_stats <- flight_stats %>%
mutate(
ratio = flight_stats$num_delay / flight_stats$num_all_flights
)
View(flight_stats)
has_most_delays_by_ratio <- flight_stats %>%
filter(ratio == max(ratio)) %>%
select(carrier, ratio)
View(has_most_delays_by_ratio)
# Get name of the most delayed carrier
most_delayed_name_by_ratio <- has_most_delays_by_ratio %>%
left_join(airlines, by = 'carrier') %>%
select(name)
View(most_delayed_name_by_ratio)
print(most_delayed_name_by_ratio)
print(has_most_delays_by_ratio)
print(most_early)
most_early <- flights %>%
group_by(dest) %>%
summarize(delay = mean(arr_delay))
View(most_early)
print(most_early)
most_early <- flights %>%
group_by(dest) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE))
print(most_early)
View(airports)
most_early <- flights %>%
group_by(dest) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(delay == min(delay, na.rm = TRUE)) %>%
select(dest, delay) %>%
left_join(airports, by = c("dest" = "faa")) %>%
select(dest, name, delay)
print(most_early)
delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE)) %>%
select(delay) %>%
mutate(month = month.name) %>%
print()
delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE)) %>%
select(delay) %>%
mutate(month = month.name) %>% # month.name is a variable built in R
print()
flights %>%
group_by(month) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(delay == max(delay)) %>%
print()
ggplot(data = delay_by_month) +
geom_point(
mapping = aes(x = delay, y = month),
color = "blue",
alpha = .4,
size = 3
) +
geom_vline(xintercept = 0, size = .25) +
xlim(c(-20, 20)) +
scale_y_discrete(limits = rev(month.name)) +
labs(title = "Average Delay by Month", y = "", x = "Delay (minutes)")
?read.csv
wb_data <- read.csv(
"r/world_bank_data.csv",
stringsAsFactors = F,
skip = 4
)
wb_data <- read.csv(
"data/r/world_bank_data.csv",
stringsAsFactors = F,
skip = 4
)
setwd("~/Documents/git/Data-Science-Notes")
wb_data <- read.csv(
"data/r/world_bank_data.csv",
stringsAsFactors = F,
skip = 4
)
wb_data <- read.csv(
"data/r/world_bank_data.csv",
stringsAsFactors = F,
skip = 4
)
View(wb_data)
library(tidyr) # for data wrangling
library(dplyr) # for data wrangling
library(ggplot2) # for plotting
library(ggrepel) # for plotting
library(scales) # for plotting
install.packages("ggrepel")
library(tidyr) # for data wrangling
library(dplyr) # for data wrangling
library(ggplot2) # for plotting
library(ggrepel) # for plotting
library(scales) # for plotting
# Plot the expenditure in 1990 against 2014 using the `ggplot2` package
expenditure_chart <- ggplot(data = expenditure_plot_data) +
geom_text_repel(
mapping = aes(x = X1990 / 100, y = X2014 / 100, label = Country.Code)
) +
scale_x_continuous(labels = percent) +
scale_y_continuous(labels = percent) +
labs(
title = indicator, x = "Expenditure 1990",
y = "Expenditure 2014"
)
expenditure_plot_data <- wb_data %>%
filter(Indicator.Name == indicator)
# Plot the expenditure in 1990 against 2014 using the `ggplot2` package
expenditure_chart <- ggplot(data = expenditure_plot_data) +
geom_text_repel(
mapping = aes(x = X1990 / 100, y = X2014 / 100, label = Country.Code)
) +
scale_x_continuous(labels = percent) +
scale_y_continuous(labels = percent) +
labs(
title = indicator, x = "Expenditure 1990",
y = "Expenditure 2014"
)
# Begin by filtering the rows for the indicator of interest
indicator <- "Government expenditure on education, total (% of GDP)"
expenditure_plot_data <- wb_data %>%
filter(Indicator.Name == indicator)
# Plot the expenditure in 1990 against 2014 using the `ggplot2` package
expenditure_chart <- ggplot(data = expenditure_plot_data) +
geom_text_repel(
mapping = aes(x = X1990 / 100, y = X2014 / 100, label = Country.Code)
) +
scale_x_continuous(labels = percent) +
scale_y_continuous(labels = percent) +
labs(
title = indicator, x = "Expenditure 1990",
y = "Expenditure 2014"
)
View(expenditure_plot_data)
# Plot the expenditure in 1990 against 2014 using the `ggplot2` package
expenditure_chart <- ggplot(data = expenditure_plot_data) +
geom_text_repel(
mapping = aes(x = X1990 / 100, y = X2014 / 100, label = Country.Code)
) +
scale_x_continuous(labels = percent) +
scale_y_continuous(labels = percent) +
labs(
title = indicator, x = "Expenditure 1990",
y = "Expenditure 2014"
)
source('~/Documents/git/Data-Science-Notes/360c_R_Case_Study.R')
install.packages("ggrepel")
install.packages("ggrepel")
install.packages("ggrepel")
source('~/Documents/git/Data-Science-Notes/360c_R_Case_Study.R')
install.packages("ggrepel")
View(long_year_data)
spain_plot_data <- long_year_data %>%
filter(
Indicator.Name == indicator,
Country.Code == "ESP" # Spain
) %>%
mutate(year = as.numeric(substr(year, 2, 5))) # remove "X" before each year
spain_chart <- ggplot(data = spain_plot_data) +
geom_line(mapping = aes(x = year, y = value / 100)) +
scale_y_continuous(labels = percent) +
labs(title = chart_title, x = "Year", y = "Percent of GDP Expenditure")
# Show the educational expenditure over time
chart_title <- paste(indicator, " in Spain")
spain_chart <- ggplot(data = spain_plot_data) +
geom_line(mapping = aes(x = year, y = value / 100)) +
scale_y_continuous(labels = percent) +
labs(title = chart_title, x = "Year", y = "Percent of GDP Expenditure")
# Reshape the data to create columns for each indicator
wide_data <- long_year_data %>%
select(-Indicator.Code) %>% # do not include the `Indicator.Code` column
spread(
key = Indicator.Name, # new column names are `Indicator.Name` values
value = value # populate new columns with values from `value`
)
# Prepare data and filter for year of interest
x_var <- "Literacy rate, adult female (% of females ages 15 and above)"
y_var <- "Unemployment, female (% of female labor force) (modeled ILO estimate)"
lit_plot_data <- wide_data %>%
mutate(
lit_percent_2014 = wide_data[, x_var] / 100,
employ_percent_2014 = wide_data[, y_var] / 100
) %>%
filter(year == "X2014")
# Show the literacy vs. employment rates
lit_chart <- ggplot(data = lit_plot_data) +
geom_point(mapping = aes(x = lit_percent_2014, y = employ_percent_2014)) +
scale_x_continuous(labels = percent) +
scale_y_continuous(labels = percent) +
labs(
x = x_var,
y = "Unemployment, female (% of female labor force)",
title = "Female Literacy Rate versus Female Unemployment Rate"
)
